{"version":3,"sources":["components/Title-Folder/Titles.js","components/Form-Folder/Form.js","components/Weather-Folder/Weather.js","components/Forecast-Card-Folder/Forecast-Cards.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","onClick","onHandleSubmit","Weather","error","Iframe","dangerouslySetInnerHTML","__html","iframe","ForecastCards","city","temperature","humidity","description","variant","src","icon","API_KEY","time","Date","getHours","WeatherApp","state","lat","long","forecastCard","isItDaytime","showCard","radar","e","a","preventDefault","zipCode","target","elements","zip","value","fetch","api_call","json","data","console","log","setState","coord","Math","round","main","temp","weather","right","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8198ce48.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nclass Titles extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"title\">\r\n                <h1 className=\"header\">Your Local Weather</h1>\r\n                <p>Find out your local weather conditions</p>\r\n            </div>\r\n\r\n        );\r\n    }\r\n};\r\n\r\nexport default Titles;","import React from \"react\";\r\nimport WeatherApp from \"../../App\";\r\nimport './form-styles.css';\r\n\r\nclass Form extends React.Component {\r\n    \r\n    render(){\r\n        return(\r\n           <div className=\"big-box\">\r\n            <div className=\"searchDiv\">\r\n            <form className=\"searchbox_1\" onSubmit={this.props.getWeather}>\r\n                <input className=\"search_1\" type=\"text\" name= \"zip\" placeholder=\"Zip Code...\"/>\r\n                <button className=\"submit_1\">\r\n                    <img onClick={this.onHandleSubmit} type=\"submit\" />\r\n                </button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./Weather.css\";\r\n\r\nclass Weather extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"your-weather\">\r\n            {this.props.error && <p>{this.props.error}</p>}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport \"./Forecast-Cards.css\";\r\n\r\nconst iframe = '<iframe scrolling=\"no\" title=\"fx.\" src=\"https://www.rainviewer.com/map.html\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\"></iframe>'; \r\n\r\nfunction Iframe(props) {\r\n    return (<div dangerouslySetInnerHTML={ {__html:  props.iframe?props.iframe:\"\"}} />);\r\n  }\r\n\r\nclass ForecastCards extends React.Component{\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"Forecast\">\r\n                <div className=\"city\">\r\n                                { this.props.city && <h5 className=\"small-text\">Here's Your Weather in <h1 className=\"large-text\">{ this.props.city }, US:</h1></h5>}   \r\n\r\n                </div>\r\n                \r\n                <div className=\"temp\">\r\n                    <h4 className=\"number\">{this.props.temperature}Â°</h4>\r\n                    <p>\r\n                    { this.props.humidity &&  <p>Humidity: { this.props.humidity }</p>}\r\n                    { this.props.description }\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"icon\">\r\n                    <img variant=\"top\" src={`https://openweathermap.org/img/wn/${this.props.icon}@2x.png`}/>\r\n                </div>\r\n\r\n                <div className=\"radar-box\">   \r\n                    <Iframe iframe={iframe} />                     \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForecastCards;","import React from \"react\";\r\nimport Titles from \"./components/Title-Folder/Titles\";\r\nimport Form from \"./components/Form-Folder/Form\";\r\nimport Weather from \"./components/Weather-Folder/Weather\";\r\nimport ForecastCards from \"./components/Forecast-Card-Folder/Forecast-Cards\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport Fade from 'react-reveal/Fade';\r\nimport { auto } from \"async\";\r\n\r\n\r\nconst API_KEY = \"3d790876479461764d53a954986abf1d\";\r\nconst date = new Date();\r\nconst time = date.getHours();\r\n\r\n\r\nclass WeatherApp extends React.Component {\r\n  state ={\r\n    lat: \"\",\r\n    long: \"\",\r\n    city: \"\",\r\n    forecastCard: \"\",\r\n    temperature: \"\",\r\n    humidity: \"\",\r\n    description: \"\",\r\n    icon: \"\",\r\n    error: \"\",\r\n    isItDaytime: \"\",\r\n    showCard: false,\r\n    radar:\"\"\r\n  }\r\n\r\n  \r\n  componentDidMount() {\r\n    if (time <19 && time >6){\r\n        this.setState({\r\n          isItDaytime: true\r\n        });\r\n      } else {\r\n        this.setState({\r\n          isItDaytime: false\r\n        });\r\n      }\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const zipCode = e.target.elements.zip.value;\r\n    \r\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${zipCode},us&units=imperial&appid=${API_KEY}`)\r\n    const data = await api_call.json();\r\n    \r\n     \r\n    \r\n    \r\n    \r\n    if (zipCode){\r\n    console.log(data); \r\n    \r\n    this.setState({\r\n      lat: data.coord[1],\r\n      long: data.coord[0],\r\n      temperature: Math.round(data.main.temp),\r\n      city: data.name,\r\n      humidity: data.main.humidity,\r\n      description:data.weather[0].description,\r\n      icon: data.weather[0].icon,\r\n      error: \"\",\r\n      showCard:true,\r\n     });\r\n    } else {\r\n    console.log(data); \r\n    this.setState({\r\n      lat: \"\",\r\n      long: \"\",\r\n      temperature: \"\",\r\n      city:\"\",\r\n      humidity: \"\",\r\n      description: \"\",\r\n      forecastCard: \"\",\r\n      icon: \"\",\r\n      radar: \"\",\r\n      error: \"Please Enter a Valid Zip Code\"\r\n     });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div  className= {this.state.isItDaytime ? 'background-day' : 'background-night'}>\r\n          <div className=\"row\">\r\n            <div className=\"text-box-left\">\r\n                <Titles />\r\n                <Form getWeather={this.getWeather} />\r\n                <Weather \r\n                \r\n                error={this.state.error}\r\n                />\r\n            </div>\r\n            <Fade right>\r\n              <div className={this.state.showCard ? 'show-card' : 'no-card'}>\r\n                    <div>\r\n                    <ForecastCards\r\n                    city={this.state.city}\r\n                    icon={this.state.icon}\r\n                    temperature={this.state.temperature} \r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}        \r\n                    />\r\n                    </div>\r\n              </div>\r\n           </Fade>\r\n          \r\n           </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherApp;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport WeatherApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WeatherApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}