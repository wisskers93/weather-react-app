{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","components/Forecast-Cards.js","App.js","serviceWorker.js","index.js"],"names":["Titles","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","onClick","onHandleSubmit","Weather","city","state","error","ForecastCards","Card","style","width","Img","variant","height","src","icon","Body","Title","temperature","Text","humidity","description","API_KEY","time","Date","getHours","WeatherApp","forecastCard","isItDaytime","showCard","e","a","preventDefault","target","elements","value","stateInUsa","fetch","api_call","json","data","console","log","setState","main","temp","weather","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4PAceA,E,uKAVP,OACI,6BACI,gDACA,0E,GALKC,IAAMC,WCgBZC,E,uKAVP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAM,OAAOC,YAAY,YAC5C,2BAAOF,KAAK,OAAOC,KAAM,QAAQC,YAAY,aAC7C,4BAAQC,QAASN,KAAKO,eAAgBJ,KAAK,UAA3C,oB,GATGP,IAAMC,WCUVW,E,uKATP,OACI,6BACER,KAAKC,MAAMQ,MAAQ,wCAAeT,KAAKC,MAAMQ,KAA1B,KAAmCT,KAAKC,MAAMS,OAClEV,KAAKC,MAAMU,OAAS,2BAAIX,KAAKC,MAAMU,Y,GAL1Bf,IAAMC,W,OCwBbe,E,uKAjBP,OACI,6BACA,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,OAAO,QAAQC,IAAG,2CAAsCnB,KAAKC,MAAMmB,KAAjD,aACtC,kBAACP,EAAA,EAAKQ,KAAN,KACI,kBAACR,EAAA,EAAKS,MAAN,KAAatB,KAAKC,MAAMsB,aACxB,kBAACV,EAAA,EAAKW,KAAN,KACExB,KAAKC,MAAMwB,UAAa,wCAAezB,KAAKC,MAAMwB,UAClDzB,KAAKC,MAAMyB,oB,GAdT9B,IAAMC,WCM5B8B,G,MAAU,oCAEVC,GADO,IAAIC,MACCC,WAuFHC,E,4MApFbrB,MAAO,CACLA,MAAO,GACPD,KAAM,GACNuB,aAAc,GACdT,YAAa,GACbE,SAAU,GACVC,YAAa,GACbN,KAAM,GACNT,MAAO,GACPsB,YAAa,GACbC,UAAU,G,EAgBZhC,W,uCAAa,WAAOiC,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACI5B,EAAO0B,EAAEG,OAAOC,SAAS9B,KAAK+B,MAC9BC,EAAaN,EAAEG,OAAOC,SAAS7B,MAAM8B,MAHhC,SAIYE,MAAM,oDAAD,OAAqDjC,EAArD,YAA6DgC,EAA7D,iCAAgGd,IAJjH,cAILgB,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAOPpC,GAAQgC,GACZK,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZzB,YAAasB,EAAKI,KAAKC,KACvBzC,KAAMoC,EAAKzC,KACXM,MAAO+B,EACPhB,SAAUoB,EAAKI,KAAKxB,SACpBC,YAAamB,EAAKM,QAAQ,GAAGzB,YAC7BN,KAAMyB,EAAKM,QAAQ,GAAG/B,KACtBT,MAAO,GACPuB,UAAS,MAGXY,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZzB,YAAa,GACbd,KAAK,GACLC,MAAM,GACNe,SAAU,GACVC,YAAa,GACbM,aAAc,GACdZ,KAAM,GACNT,MAAO,uDA7BE,4C,wHAXPiB,EAAM,IAAMA,EAAM,EAClB5B,KAAKgD,SAAS,CACZf,aAAa,IAGfjC,KAAKgD,SAAS,CACZf,aAAa,M,+BAyCnB,OACE,yBAAKmB,UAAYpD,KAAKU,MAAMuB,YAAc,iBAAmB,oBAC3D,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM/B,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACAO,KAAMT,KAAKU,MAAMD,KACjBC,MAAOV,KAAKU,MAAMA,MAClBC,MAAOX,KAAKU,MAAMC,QAElB,yBAAKyC,UAAYpD,KAAKU,MAAMwB,SAAW,YAAc,WACrD,kBAAC,EAAD,CACAd,KAAMpB,KAAKU,MAAMU,KACjBG,YAAavB,KAAKU,MAAMa,YACxBE,SAAUzB,KAAKU,MAAMe,SACrBC,YAAa1B,KAAKU,MAAMgB,oB,GA7EP9B,IAAMC,WCDXwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACLmC,QAAQnC,MAAMA,EAAM2D,a","file":"static/js/main.f0dfcfa2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Your Weather App</h1>\r\n                <p>Find out your local weather conditions</p>\r\n            </div>\r\n\r\n        );\r\n    }\r\n};\r\n\r\nexport default Titles;","import React from \"react\";\r\nimport WeatherApp from \"../App\";\r\n\r\nclass Form extends React.Component {\r\n    \r\n\r\n    \r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type=\"text\" name= \"city\" placeholder=\"City...\"/>\r\n                <input type=\"text\" name= \"state\" placeholder=\"State...\" />\r\n                <button onClick={this.onHandleSubmit} type=\"submit\">Get Weather</button>\r\n            </form>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nclass Weather extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n            { this.props.city && <p>Location: { this.props.city }, {this.props.state}</p>}   \r\n            {this.props.error && <p>{this.props.error}</p>}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Card from 'react-bootstrap/card';\r\n\r\nclass ForecastCards extends React.Component{\r\n\r\n     \r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <Card style={{ width: '10rem' }}>\r\n                <Card.Img variant=\"top\" height=\"100em\" src={`http://openweathermap.org/img/wn/${this.props.icon}@2x.png`}/>\r\n                    <Card.Body>\r\n                        <Card.Title>{this.props.temperature}</Card.Title>\r\n                        <Card.Text>\r\n                        { this.props.humidity &&  <p>Humidity: { this.props.humidity }</p>}\r\n                        { this.props.description }\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n            </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForecastCards;","import React from \"react\";\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\nimport ForecastCards from \"./components/Forecast-Cards\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\n\r\nconst API_KEY = \"3d790876479461764d53a954986abf1d\";\r\nconst date = new Date();\r\nconst time = date.getHours();\r\n\r\nclass WeatherApp extends React.Component {\r\n  state ={\r\n    state: \"\",\r\n    city: \"\",\r\n    forecastCard: \"\",\r\n    temperature: \"\",\r\n    humidity: \"\",\r\n    description: \"\",\r\n    icon: \"\",\r\n    error: \"\",\r\n    isItDaytime: \"\",\r\n    showCard: false\r\n  }\r\n\r\n  \r\n  componentDidMount() {\r\n    if (time <19 && time >6){\r\n        this.setState({\r\n          isItDaytime: true\r\n        });\r\n      } else {\r\n        this.setState({\r\n          isItDaytime: false\r\n        });\r\n      }\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const stateInUsa = e.target.elements.state.value;\r\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${stateInUsa}&units=imperial&appid=${API_KEY}`)\r\n    const data = await api_call.json();  \r\n    \r\n    if (city && stateInUsa){\r\n    console.log(data); \r\n    this.setState({\r\n      temperature: data.main.temp,\r\n      city: data.name,\r\n      state: stateInUsa,\r\n      humidity: data.main.humidity,\r\n      description: data.weather[0].description,\r\n      icon: data.weather[0].icon,\r\n      error: \"\",\r\n      showCard:true\r\n     });\r\n    } else {\r\n    console.log(data); \r\n    this.setState({\r\n      temperature: \"\",\r\n      city:\"\",\r\n      state:\"\",\r\n      humidity: \"\",\r\n      description: \"\",\r\n      forecastCard: \"\",\r\n      icon: \"\",\r\n      error: \"Please Enter the Full Names of the City and State\"\r\n     });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className= {this.state.isItDaytime ? 'background-day' : 'background-night'} >\r\n        <Titles />\r\n        <Form getWeather={this.getWeather} />\r\n        <Weather \r\n        city={this.state.city}\r\n        state={this.state.state}\r\n        error={this.state.error}\r\n        />\r\n        <div className= {this.state.showCard ? 'show-card' : 'no-card'}>\r\n        <ForecastCards\r\n        icon={this.state.icon}\r\n        temperature={this.state.temperature} \r\n        humidity={this.state.humidity}\r\n        description={this.state.description}        \r\n        />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WeatherApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}